datasource db {
    provider = "postgresql" // or your preferred database provider
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        Int        @id @default(autoincrement())
    name      String?
    email     String     @unique
    password  String?
    image     String?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    events    Event[]
    tickets   Ticket[]
    cartItems CartItem[]
    orders    Order[]
}

model Event {
    id          Int         @id @default(autoincrement())
    title       String
    description String
    price       Float
    image       String
    location    String
    date        DateTime
    time        String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User        @relation(fields: [userId], references: [id])
    userId      Int
    tickets     Ticket[]
    CartItem    CartItem[]
    OrderItem   OrderItem[]
}

model Ticket {
    id          Int          @id @default(autoincrement())
    event       Event        @relation(fields: [eventId], references: [id])
    eventId     Int
    user        User         @relation(fields: [userId], references: [id])
    userId      Int
    bookingTime DateTime     @default(now())
    status      TicketStatus @default(PENDING)
    payment     Payment?     @relation(fields: [paymentId], references: [id])
    paymentId   Int?
}

model CartItem {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   Int
    quantity  Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Order {
    id         Int         @id @default(autoincrement())
    user       User        @relation(fields: [userId], references: [id])
    userId     Int
    amount     Float
    status     OrderStatus @default(PENDING)
    payment    Payment?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    orderItems OrderItem[]
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   Int
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   Int
    quantity  Int
    price     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Payment {
    id        Int           @id @default(autoincrement())
    order     Order         @relation(fields: [orderId], references: [id])
    orderId   Int           @unique
    amount    Float
    status    PaymentStatus
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    Ticket    Ticket[]
}

enum TicketStatus {
    PENDING
    CONFIRMED
    CANCELLED
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}
